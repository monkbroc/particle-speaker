/*
 * example stereo tone generator for particle or electron
 * tone1 => DAC1, tone2 => DAC2
 * khp@secureforward.net
 *
 */

#include "speaker.h"

SYSTEM_THREAD(ENABLED);

// three tone gen options:
// VARIABLE_STEREO_TONES: particle function set-able tone frequencies
// FIXED_MONO_TONE:       python pre-generated fixed mono tone
// FIXED_STEREO_TONES:    python pre-generated fixed stereo tones

#define VARIABLE_STEREO_TONES 1

#ifdef VARIABLE_STEREO_TONES

#include "math.h"

#define IDX_NFRAC 16
#define FS     32768
#define OFFSET (1 << 15)
#define AMP    (((1 << 15) - 1) * 0.88)
#define BUFLEN 1024

// default tone freq of 128Hz
#define DEFAULT_FC (128 << IDX_NFRAC)

// tone 1 params
uint32_t tone1_fc = DEFAULT_FC;
uint32_t tone1_fc_new = DEFAULT_FC;
uint32_t tone1_last_samp;
uint32_t tone1_idx;

// tone 2 params
uint32_t tone2_fc = DEFAULT_FC;
uint32_t tone2_fc_new = DEFAULT_FC;
uint32_t tone2_last_samp;
uint32_t tone2_idx;

int tone1Freq(String arg) {
	float argfc = arg.toFloat();
	if ((argfc != 0.0) && (argfc < ((float)(FS >> 1)))) {
		tone1_fc_new = ((uint32_t)(argfc * (1 << IDX_NFRAC) + 0.5));
		return tone1_fc_new;
	} else {
		return -1;
	}
}

int tone2Freq(String arg) {
	float argfc = arg.toFloat();
	if ((argfc != 0.0) && (argfc < ((float)(FS >> 1)))) {
		tone2_fc_new = ((uint32_t)(argfc * (1 << IDX_NFRAC) + 0.5));
		return tone2_fc_new;
	} else {
		return -1;
	}
}

/* Set up the DAC driver, double-buffering, stereo */
Speaker speaker(BUFLEN, true, true);

void setup() {
	Particle.function("tone1Freq", tone1Freq);
	Particle.function("tone2Freq", tone2Freq);
	// Start the DAC driver
	speaker.begin(FS);
}

void handleZeroCross(uint32_t tone1_samp, uint32_t tone2_samp) {
	if ((tone1_last_samp <= OFFSET) && (tone1_samp >= OFFSET)) {
		// zero-cross, change freq if needed
		if (tone1_fc != tone1_fc_new) {
			tone1_fc = tone1_fc_new;
		}
	}
	if ((tone2_last_samp <= OFFSET) && (tone2_samp >= OFFSET)) {
		// zero-cross, change freq if needed
		if (tone2_fc != tone2_fc_new) {
			tone2_fc = tone2_fc_new;
		}
	}

}

void genTones(uint32_t *buffer) {
	float offset = OFFSET;
	float amp = AMP;
	float scale = 2.0 * M_PI / ((float)FS);
	for (uint32_t i = 0; i < BUFLEN; i++) {
		float tone1_arg = scale * ((float)tone1_idx) / ((float)(1 << IDX_NFRAC));
		uint32_t tone1_samp = offset + amp * cos(tone1_arg);

		float tone2_arg = scale * ((float)tone2_idx) / ((float)(1 << IDX_NFRAC));
		uint32_t tone2_samp = offset + amp * cos(tone2_arg);

		handleZeroCross(tone1_samp, tone2_samp);
		buffer[i] = SPEAKER_STEREO_FORMAT(tone1_samp, tone2_samp);

		tone1_last_samp = tone1_samp;
		tone1_idx += tone1_fc;
		tone1_idx %= (FS << IDX_NFRAC);

		tone2_last_samp = tone2_samp;
		tone2_idx += tone2_fc;
		tone2_idx %= (FS << IDX_NFRAC);
	}
}	

/* Generate more audio data when needed */
void loop() {
	if (speaker.ready()) {
		uint32_t *buffer = speaker.getStereoBuffer();
		genTones(buffer);
	}
}

#elif defined(FIXED_MONO_TONE)

/*
import numpy as np
class Tone(object):
    def __init__(self, fc=10, fs=100, amp=1, nsamps=10):
        self.amp = amp
        self.angle = 0
        self.delta = 2.0 * np.pi * fc / fs
        self.nsamps = nsamps
    def __call__(self):
        y = [ self.amp * np.cos(self.angle + i * self.delta) for i in range(0, self.nsamps) ]
        self.angle = np.mod(self.angle + self.nsamps * self.delta, 2.0 * np.pi)
        return y

fs = 32768
fc = 128
nsamps = int(fs/fc)

tone = Tone(fc, fs, 0.88, nsamps)
tone_int = [(int(round(x*(2**15-1))) + 2**15) for x in tone()]

if nsamps > 8192:
    assert((nsamps % 2) == 0)
    print('#define TONE_FS %d\n#define TONE_NSAMPS %d\n\n' % (fs, nsamps >> 1))
    print('uint16_t buffer0[TONE_NSAMPS] = {\n%s};\n' % (','.join([str(x) for x in tone_int[0:nsamps >> 1]])))
    print('uint16_t buffer1[TONE_NSAMPS] = {\n%s};\n' % (','.join([str(x) for x in tone_int[nsamps >> 1:]])))
else:
    print('#define TONE_FS %d\n#define TONE_NSAMPS %d\n\n' % (fs, nsamps))
    print('uint16_t buffer0[TONE_NSAMPS] = {\n%s};\n' % (','.join([str(x) for x in tone_int[0:nsamps]])))
    print('uint16_t buffer1[TONE_NSAMPS] = {\n%s};\n' % (','.join([str(x) for x in tone_int[0:nsamps]])))

*/

#define TONE_FS 32768
#define TONE_NSAMPS 256

uint16_t buffer0[TONE_NSAMPS] = {
61603,61594,61568,61525,61464,61386,61291,61178,61049,60902,60739,60558,60361,60148,59917,59671,59408,59129,58834,58524,58198,57857,57501,57129,56743,56343,55928,55500,55058,54602,54133,53652,53157,52651,52132,51602,51061,50508,49945,49371,48788,48195,47592,46981,46361,45733,45097,44453,43803,43146,42482,41813,41138,40459,39774,39086,38393,37698,36999,36298,35594,34889,34183,33476,32768,32060,31353,30647,29942,29238,28537,27838,27143,26450,25762,25077,24398,23723,23054,22390,21733,21083,20439,19803,19175,18555,17944,17341,16748,16165,15591,15028,14475,13934,13404,12885,12379,11884,11403,10934,10478,10036,9608,9193,8793,8407,8035,7679,7338,7012,6702,6407,6128,5865,5619,5388,5175,4978,4797,4634,4487,4358,4245,4150,4072,4011,3968,3942,3933,3942,3968,4011,4072,4150,4245,4358,4487,4634,4797,4978,5175,5388,5619,5865,6128,6407,6702,7012,7338,7679,8035,8407,8793,9193,9608,10036,10478,10934,11403,11884,12379,12885,13404,13934,14475,15028,15591,16165,16748,17341,17944,18555,19175,19803,20439,21083,21733,22390,23054,23723,24398,25077,25762,26450,27143,27838,28537,29238,29942,30647,31353,32060,32768,33476,34183,34889,35594,36298,36999,37698,38393,39086,39774,40459,41138,41813,42482,43146,43803,44453,45097,45733,46361,46981,47592,48195,48788,49371,49945,50508,51061,51602,52132,52651,53157,53652,54133,54602,55058,55500,55928,56343,56743,57129,57501,57857,58198,58524,58834,59129,59408,59671,59917,60148,60361,60558,60739,60902,61049,61178,61291,61386,61464,61525,61568,61594};

uint16_t buffer1[TONE_NSAMPS] = {
61603,61594,61568,61525,61464,61386,61291,61178,61049,60902,60739,60558,60361,60148,59917,59671,59408,59129,58834,58524,58198,57857,57501,57129,56743,56343,55928,55500,55058,54602,54133,53652,53157,52651,52132,51602,51061,50508,49945,49371,48788,48195,47592,46981,46361,45733,45097,44453,43803,43146,42482,41813,41138,40459,39774,39086,38393,37698,36999,36298,35594,34889,34183,33476,32768,32060,31353,30647,29942,29238,28537,27838,27143,26450,25762,25077,24398,23723,23054,22390,21733,21083,20439,19803,19175,18555,17944,17341,16748,16165,15591,15028,14475,13934,13404,12885,12379,11884,11403,10934,10478,10036,9608,9193,8793,8407,8035,7679,7338,7012,6702,6407,6128,5865,5619,5388,5175,4978,4797,4634,4487,4358,4245,4150,4072,4011,3968,3942,3933,3942,3968,4011,4072,4150,4245,4358,4487,4634,4797,4978,5175,5388,5619,5865,6128,6407,6702,7012,7338,7679,8035,8407,8793,9193,9608,10036,10478,10934,11403,11884,12379,12885,13404,13934,14475,15028,15591,16165,16748,17341,17944,18555,19175,19803,20439,21083,21733,22390,23054,23723,24398,25077,25762,26450,27143,27838,28537,29238,29942,30647,31353,32060,32768,33476,34183,34889,35594,36298,36999,37698,38393,39086,39774,40459,41138,41813,42482,43146,43803,44453,45097,45733,46361,46981,47592,48195,48788,49371,49945,50508,51061,51602,52132,52651,53157,53652,54133,54602,55058,55500,55928,56343,56743,57129,57501,57857,58198,58524,58834,59129,59408,59671,59917,60148,60361,60558,60739,60902,61049,61178,61291,61386,61464,61525,61568,61594};

/* Set up the DAC driver, fixed buffers, mono */
Speaker speaker(buffer0, buffer1, TONE_NSAMPS);

void setup() {
	// Start the DAC driver
	speaker.begin(TONE_FS);
}

#elif defined(FIXED_STEREO_TONES)

/*
import numpy as np
class Tone(object):
    def __init__(self, fc=10, fs=100, amp=1, nsamps=10):
        self.amp = amp
        self.angle = 0
        self.delta = 2.0 * np.pi * fc / fs
        self.nsamps = nsamps
    def __call__(self):
        y = [ self.amp * np.cos(self.angle + i * self.delta) for i in range(0, self.nsamps) ]
        self.angle = np.mod(self.angle + self.nsamps * self.delta, 2.0 * np.pi)
        return y

fs = 32768
fc1 = 128
fc2 = 256
assert(max(fc1, fc2) % min(fc1, fc2) == 0)
nsamps = max(int(fs/fc1), int(fs/fc2))

tone1 = Tone(fc1, fs, 0.88, nsamps)
tone1_int = [(int(round(x*(2**15-1))) + 2**15) for x in tone1()]

tone2 = Tone(fc2, fs, 0.88, nsamps)
tone2_int = [(int(round(x*(2**15-1))) + 2**15) for x in tone2()]

tones = [ ((x[1] & 0xffff) << 16) | (x[0] & 0xffff) for x in zip(tone1_int, tone2_int) ]

if nsamps > 4096:
    assert((nsamps % 2) == 0)
    print('#define TONE_FS %d\n#define TONE_NSAMPS %d\n\n' % (fs, nsamps >> 1))
    print('uint32_t buffer0[TONE_NSAMPS] = {\n%s};\n' % (','.join([str(x) for x in tones[0:nsamps >> 1]])))
    print('uint32_t buffer1[TONE_NSAMPS] = {\n%s};\n' % (','.join([str(x) for x in tones[nsamps >> 1:]])))
else:
    print('#define TONE_FS %d\n#define TONE_NSAMPS %d\n\n' % (fs, nsamps))
    print('uint32_t buffer0[TONE_NSAMPS] = {\n%s};\n' % (','.join([str(x) for x in tones[0:nsamps]])))
    print('uint32_t buffer1[TONE_NSAMPS] = {\n%s};\n' % (','.join([str(x) for x in tones[0:nsamps]])))

*/

#define TONE_FS 32768
#define TONE_NSAMPS 256

uint32_t buffer0[TONE_NSAMPS] = {
4037275811,4034982042,4028166272,4016828501,4000968728,3980652490,3955879787,3926781690,3893423737,3855805926,3814124867,3768446094,3718769609,3665357556,3608341005,3547719959,3483756560,3416581881,3346392530,3273254044,3197428566,3119047169,3038371997,2955534121,2870730151,2784156695,2696075896,2606684364,2516178706,2424821066,2332742517,2240270740,2147536805,2054802859,1962331044,1870252434,1778894709,1688388940,1598997273,1510916315,1424342676,1339538499,1256700392,1176024965,1097643289,1021817509,948678697,878488997,811313947,747350154,686728690,629711701,576299186,526622219,480942942,439261358,401643001,368284482,339185799,314412490,294095626,278235209,266896775,260080324,257785856,260078908,266893945,278230967,294089974,314405430,339177337,368274622,401631751,439248722,480928930,526606837,576282446,629693611,686709262,747329398,811291877,878465627,948654039,1021791579,1097616103,1175996539,1256670744,1339507645,1424310636,1510883109,1598962919,1688353460,1778858123,1870214766,1962292316,2054763093,2147496027,2240228972,2332699787,2424777398,2516134126,2606638900,2696029576,2784109545,2870682201,2955485399,3038322531,3118996991,3197377706,3273202532,3346340398,3416529159,3483703280,3547666153,3608286707,3665302796,3718714423,3768390514,3814068925,3855749658,3893367175,3926724870,3955822741,3980595254,4000911336,4016770987,4028108672,4034924390,4037218141,4034924390,4028108672,4016770987,4000911336,3980595254,3955822741,3926724870,3893367175,3855749658,3814068925,3768390514,3718714423,3665302796,3608286707,3547666153,3483703280,3416529159,3346340398,3273202532,3197377706,3118996991,3038322531,2955485399,2870682201,2784109545,2696029576,2606638900,2516134126,2424777398,2332699787,2240228972,2147496027,2054763093,1962292316,1870214766,1778858123,1688353460,1598962919,1510883109,1424310636,1339507645,1256670744,1175996539,1097616103,1021791579,948654039,878465627,811291877,747329398,686709262,629693611,576282446,526606837,480928930,439248722,401631751,368274622,339177337,314405430,294089974,278230967,266893945,260078908,257785856,260080324,266896775,278235209,294095626,314412490,339185799,368284482,401643001,439261358,480942942,526622219,576299186,629711701,686728690,747350154,811313947,878488997,948678697,1021817509,1097643289,1176024965,1256700392,1339538499,1424342676,1510916315,1598997273,1688388940,1778894709,1870252434,1962331044,2054802859,2147536805,2240270740,2332742517,2424821066,2516178706,2606684364,2696075896,2784156695,2870730151,2955534121,3038371997,3119047169,3197428566,3273254044,3346392530,3416581881,3483756560,3547719959,3608341005,3665357556,3718769609,3768446094,3814124867,3855805926,3893423737,3926781690,3955879787,3980652490,4000968728,4016828501,4028166272,4034982042};

uint32_t buffer1[TONE_NSAMPS] = {
4037275811,4034982042,4028166272,4016828501,4000968728,3980652490,3955879787,3926781690,3893423737,3855805926,3814124867,3768446094,3718769609,3665357556,3608341005,3547719959,3483756560,3416581881,3346392530,3273254044,3197428566,3119047169,3038371997,2955534121,2870730151,2784156695,2696075896,2606684364,2516178706,2424821066,2332742517,2240270740,2147536805,2054802859,1962331044,1870252434,1778894709,1688388940,1598997273,1510916315,1424342676,1339538499,1256700392,1176024965,1097643289,1021817509,948678697,878488997,811313947,747350154,686728690,629711701,576299186,526622219,480942942,439261358,401643001,368284482,339185799,314412490,294095626,278235209,266896775,260080324,257785856,260078908,266893945,278230967,294089974,314405430,339177337,368274622,401631751,439248722,480928930,526606837,576282446,629693611,686709262,747329398,811291877,878465627,948654039,1021791579,1097616103,1175996539,1256670744,1339507645,1424310636,1510883109,1598962919,1688353460,1778858123,1870214766,1962292316,2054763093,2147496027,2240228972,2332699787,2424777398,2516134126,2606638900,2696029576,2784109545,2870682201,2955485399,3038322531,3118996991,3197377706,3273202532,3346340398,3416529159,3483703280,3547666153,3608286707,3665302796,3718714423,3768390514,3814068925,3855749658,3893367175,3926724870,3955822741,3980595254,4000911336,4016770987,4028108672,4034924390,4037218141,4034924390,4028108672,4016770987,4000911336,3980595254,3955822741,3926724870,3893367175,3855749658,3814068925,3768390514,3718714423,3665302796,3608286707,3547666153,3483703280,3416529159,3346340398,3273202532,3197377706,3118996991,3038322531,2955485399,2870682201,2784109545,2696029576,2606638900,2516134126,2424777398,2332699787,2240228972,2147496027,2054763093,1962292316,1870214766,1778858123,1688353460,1598962919,1510883109,1424310636,1339507645,1256670744,1175996539,1097616103,1021791579,948654039,878465627,811291877,747329398,686709262,629693611,576282446,526606837,480928930,439248722,401631751,368274622,339177337,314405430,294089974,278230967,266893945,260078908,257785856,260080324,266896775,278235209,294095626,314412490,339185799,368284482,401643001,439261358,480942942,526622219,576299186,629711701,686728690,747350154,811313947,878488997,948678697,1021817509,1097643289,1176024965,1256700392,1339538499,1424342676,1510916315,1598997273,1688388940,1778894709,1870252434,1962331044,2054802859,2147536805,2240270740,2332742517,2424821066,2516178706,2606684364,2696075896,2784156695,2870730151,2955534121,3038371997,3119047169,3197428566,3273254044,3346392530,3416581881,3483756560,3547719959,3608341005,3665357556,3718769609,3768446094,3814124867,3855805926,3893423737,3926781690,3955879787,3980652490,4000968728,4016828501,4028166272,4034982042};

/* Set up the DAC driver, fixed buffers, stereo */
Speaker speaker(buffer0, buffer1, TONE_NSAMPS);

void setup() {
	// Start the DAC driver
	speaker.begin(TONE_FS);
}

#endif
